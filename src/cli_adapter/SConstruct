import SCons

env = Environment()

flatten=lambda l: sum(map(flatten,l),[]) if isinstance(l,list) else [l]

def GlobRecursive(pattern, node='.'):
    results = []
    for f in Glob(str(node) + '/*', source=True):
        if type(f) is SCons.Node.FS.Dir:
            results += GlobRecursive(pattern, f)
    results += Glob(str(node) + '/' + pattern, source=True)
    return results

def AllCXXFiles(node='.'):
    if isinstance(node, list):
        return flatten([AllCXXFiles(n) for n in node])
    return GlobRecursive('*.c', node) + GlobRecursive('*.cpp', node)

src_toplevel_dirs = [
    'box2d',
    'cli_adapter',
    'glib',
    'glib_adapter',
    'openlibm',
    'softfloat',
    'spectre',
    ]
src_toplevel_dirs = ['../' + path for path in src_toplevel_dirs]

src_all_cxx_files = AllCXXFiles(src_toplevel_dirs) + ['../sim/fcsim.cpp']
src_all_asm_files = ['../spectre/fpatan.s']

include_dirs = [
    '..',
    '../sim',
    ] + src_toplevel_dirs

ccflags = ['-O2', '-flto']
cppflags = ['-std=c++17']
cppdefines = [
    'HARDFLOAT_TOGGLE', # use hard float
    'S794',
    'USE_FPATAN',
    ]

env.Append(
    CPPPATH=include_dirs,
    CCFLAGS=ccflags,
    CPPFLAGS=cppflags,
    CPPDEFINES=cppdefines,
    )
env.Program(
    target='run_single_design',
    source=src_all_cxx_files + src_all_asm_files
    )
